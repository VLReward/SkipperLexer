//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Rolis\Documents\GitHub\SkipperLexer\Skipper\Penguinese.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Skipper {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PenguineseParser : Parser {
	public const int
		NUMERAL=1, OPERATORMD=2, OPERATORPM=3, OPERATOR=4, PLUS=5, COND=6, SepCOND=7, 
		TERM=8, COM=9, OP=10, CP=11, OBR=12, CBR=13, OCB=14, CCB=15, DEC=16, EQUALS=17, 
		COL=18, TRUE=19, FALSE=20, IF=21, THEN=22, WHILE=23, FOR=24, FUNC=25, 
		MAIN=26, DOUBLE=27, CHARACTER=28, TEXT=29, NUMBER=30, ARRAYOF=31, BOOLEAN=32, 
		HALT=33, RETURN=34, READ=35, WRITE=36, LETTER=37, CHAR=38, WORD=39, STRING=40, 
		WHITESPACE=41;
	public const int
		RULE_start = 0, RULE_bloqueCodigo = 1, RULE_expresion = 2, RULE_declararVar = 3, 
		RULE_asignVar = 4, RULE_asignSimple = 5, RULE_decVar = 6, RULE_tipoVar = 7, 
		RULE_tipoVarS = 8, RULE_nombreVar = 9, RULE_variable = 10, RULE_valorVar = 11, 
		RULE_valorEntero = 12, RULE_valorDec = 13, RULE_valorChar = 14, RULE_valorString = 15, 
		RULE_valorBool = 16, RULE_mathSimple = 17, RULE_mathArray = 18, RULE_math = 19, 
		RULE_mathSeqMD = 20, RULE_mathSeqPM = 21, RULE_valorNum = 22, RULE_ciclo = 23, 
		RULE_condicional = 24, RULE_valorCond = 25, RULE_condSeq = 26, RULE_seccionFor = 27, 
		RULE_asignFor = 28, RULE_imprimirValor = 29, RULE_escribirValor = 30;
	public static readonly string[] ruleNames = {
		"start", "bloqueCodigo", "expresion", "declararVar", "asignVar", "asignSimple", 
		"decVar", "tipoVar", "tipoVarS", "nombreVar", "variable", "valorVar", 
		"valorEntero", "valorDec", "valorChar", "valorString", "valorBool", "mathSimple", 
		"mathArray", "math", "mathSeqMD", "mathSeqPM", "valorNum", "ciclo", "condicional", 
		"valorCond", "condSeq", "seccionFor", "asignFor", "imprimirValor", "escribirValor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", null, null, "';'", "','", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'.'", "'='", "':'", "'true'", "'false'", 
		"'if'", "'then'", "'while'", "'for'", "'func'", "'main'", "'double'", 
		"'character'", "'text'", "'number'", "'arrayof'", "'boolean'", "'NOOT NOOT'", 
		"'regresar'", null, "'escribirVar'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMERAL", "OPERATORMD", "OPERATORPM", "OPERATOR", "PLUS", "COND", 
		"SepCOND", "TERM", "COM", "OP", "CP", "OBR", "CBR", "OCB", "CCB", "DEC", 
		"EQUALS", "COL", "TRUE", "FALSE", "IF", "THEN", "WHILE", "FOR", "FUNC", 
		"MAIN", "DOUBLE", "CHARACTER", "TEXT", "NUMBER", "ARRAYOF", "BOOLEAN", 
		"HALT", "RETURN", "READ", "WRITE", "LETTER", "CHAR", "WORD", "STRING", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Penguinese.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PenguineseParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(PenguineseParser.FUNC, 0); }
		public ITerminalNode MAIN() { return GetToken(PenguineseParser.MAIN, 0); }
		public ITerminalNode OP() { return GetToken(PenguineseParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(PenguineseParser.CP, 0); }
		public ITerminalNode OCB() { return GetToken(PenguineseParser.OCB, 0); }
		public BloqueCodigoContext bloqueCodigo() {
			return GetRuleContext<BloqueCodigoContext>(0);
		}
		public ITerminalNode CCB() { return GetToken(PenguineseParser.CCB, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(FUNC);
			State = 63; Match(MAIN);
			State = 64; Match(OP);
			State = 65; Match(CP);
			State = 66; Match(OCB);
			State = 67; bloqueCodigo();
			State = 68; Match(CCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueCodigoContext : ParserRuleContext {
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public BloqueCodigoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloqueCodigo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterBloqueCodigo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitBloqueCodigo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloqueCodigo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueCodigoContext bloqueCodigo() {
		BloqueCodigoContext _localctx = new BloqueCodigoContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_bloqueCodigo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 70; expresion();
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << DOUBLE) | (1L << CHARACTER) | (1L << TEXT) | (1L << NUMBER) | (1L << ARRAYOF) | (1L << BOOLEAN) | (1L << HALT) | (1L << READ) | (1L << WRITE) | (1L << LETTER) | (1L << WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ITerminalNode TERM() { return GetToken(PenguineseParser.TERM, 0); }
		public DeclararVarContext declararVar() {
			return GetRuleContext<DeclararVarContext>(0);
		}
		public AsignSimpleContext asignSimple() {
			return GetRuleContext<AsignSimpleContext>(0);
		}
		public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public CicloContext ciclo() {
			return GetRuleContext<CicloContext>(0);
		}
		public ImprimirValorContext imprimirValor() {
			return GetRuleContext<ImprimirValorContext>(0);
		}
		public EscribirValorContext escribirValor() {
			return GetRuleContext<EscribirValorContext>(0);
		}
		public ITerminalNode HALT() { return GetToken(PenguineseParser.HALT, 0); }
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expresion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 75; declararVar();
				}
				break;

			case 2:
				{
				State = 76; asignSimple();
				}
				break;

			case 3:
				{
				State = 77; math();
				}
				break;

			case 4:
				{
				State = 78; ciclo();
				}
				break;

			case 5:
				{
				State = 79; imprimirValor();
				}
				break;

			case 6:
				{
				State = 80; escribirValor();
				}
				break;

			case 7:
				{
				State = 81; Match(HALT);
				}
				break;
			}
			State = 84; Match(TERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclararVarContext : ParserRuleContext {
		public DecVarContext decVar() {
			return GetRuleContext<DecVarContext>(0);
		}
		public AsignVarContext asignVar() {
			return GetRuleContext<AsignVarContext>(0);
		}
		public DeclararVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declararVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterDeclararVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitDeclararVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclararVarContext declararVar() {
		DeclararVarContext _localctx = new DeclararVarContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declararVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 86; decVar();
				}
				break;

			case 2:
				{
				State = 87; asignVar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignVarContext : ParserRuleContext {
		public AsignVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignVar; } }
	 
		public AsignVarContext() { }
		public virtual void CopyFrom(AsignVarContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignarValorContext : AsignVarContext {
		public TipoVarSContext tipoVarS() {
			return GetRuleContext<TipoVarSContext>(0);
		}
		public NombreVarContext nombreVar() {
			return GetRuleContext<NombreVarContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public ValorVarContext valorVar() {
			return GetRuleContext<ValorVarContext>(0);
		}
		public AsignarValorContext(AsignVarContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterAsignarValor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitAsignarValor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignarValor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignarVariableContext : AsignVarContext {
		public TipoVarSContext tipoVarS() {
			return GetRuleContext<TipoVarSContext>(0);
		}
		public NombreVarContext nombreVar() {
			return GetRuleContext<NombreVarContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AsignarVariableContext(AsignVarContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterAsignarVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitAsignarVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignarVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignVarContext asignVar() {
		AsignVarContext _localctx = new AsignVarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_asignVar);
		try {
			State = 100;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new AsignarValorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; tipoVarS();
				State = 91; nombreVar();
				State = 92; Match(EQUALS);
				State = 93; valorVar();
				}
				break;

			case 2:
				_localctx = new AsignarVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; tipoVarS();
				State = 96; nombreVar();
				State = 97; Match(EQUALS);
				State = 98; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignSimpleContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public ValorVarContext valorVar() {
			return GetRuleContext<ValorVarContext>(0);
		}
		public AsignSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignSimple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterAsignSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitAsignSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignSimpleContext asignSimple() {
		AsignSimpleContext _localctx = new AsignSimpleContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_asignSimple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; variable();
			State = 103; Match(EQUALS);
			State = 106;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
			case TRUE:
			case FALSE:
			case CHAR:
			case STRING:
				{
				State = 104; valorVar();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 105; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecVarContext : ParserRuleContext {
		public TipoVarContext tipoVar() {
			return GetRuleContext<TipoVarContext>(0);
		}
		public NombreVarContext[] nombreVar() {
			return GetRuleContexts<NombreVarContext>();
		}
		public NombreVarContext nombreVar(int i) {
			return GetRuleContext<NombreVarContext>(i);
		}
		public ITerminalNode[] COM() { return GetTokens(PenguineseParser.COM); }
		public ITerminalNode COM(int i) {
			return GetToken(PenguineseParser.COM, i);
		}
		public DecVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterDecVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitDecVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecVarContext decVar() {
		DecVarContext _localctx = new DecVarContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_decVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; tipoVar();
			State = 109; nombreVar();
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COM) {
				{
				{
				State = 110; Match(COM);
				State = 111; nombreVar();
				}
				}
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoVarContext : ParserRuleContext {
		public ITerminalNode ARRAYOF() { return GetToken(PenguineseParser.ARRAYOF, 0); }
		public TipoVarSContext tipoVarS() {
			return GetRuleContext<TipoVarSContext>(0);
		}
		public ITerminalNode OBR() { return GetToken(PenguineseParser.OBR, 0); }
		public ITerminalNode NUMERAL() { return GetToken(PenguineseParser.NUMERAL, 0); }
		public ITerminalNode CBR() { return GetToken(PenguineseParser.CBR, 0); }
		public TipoVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterTipoVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitTipoVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoVarContext tipoVar() {
		TipoVarContext _localctx = new TipoVarContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_tipoVar);
		try {
			State = 124;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ARRAYOF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; Match(ARRAYOF);
				State = 118; tipoVarS();
				State = 119; Match(OBR);
				State = 120; Match(NUMERAL);
				State = 121; Match(CBR);
				}
				break;
			case DOUBLE:
			case CHARACTER:
			case TEXT:
			case NUMBER:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; tipoVarS();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoVarSContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(PenguineseParser.CHARACTER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PenguineseParser.DOUBLE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(PenguineseParser.BOOLEAN, 0); }
		public ITerminalNode NUMBER() { return GetToken(PenguineseParser.NUMBER, 0); }
		public ITerminalNode TEXT() { return GetToken(PenguineseParser.TEXT, 0); }
		public TipoVarSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoVarS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterTipoVarS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitTipoVarS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoVarS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoVarSContext tipoVarS() {
		TipoVarSContext _localctx = new TipoVarSContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_tipoVarS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << CHARACTER) | (1L << TEXT) | (1L << NUMBER) | (1L << BOOLEAN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NombreVarContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(PenguineseParser.WORD, 0); }
		public ITerminalNode LETTER() { return GetToken(PenguineseParser.LETTER, 0); }
		public NombreVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nombreVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterNombreVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitNombreVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombreVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NombreVarContext nombreVar() {
		NombreVarContext _localctx = new NombreVarContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_nombreVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = _input.La(1);
			if ( !(_la==LETTER || _la==WORD) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	 
		public VariableContext() { }
		public virtual void CopyFrom(VariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NombreSimpleContext : VariableContext {
		public NombreVarContext nombreVar() {
			return GetRuleContext<NombreVarContext>(0);
		}
		public NombreSimpleContext(VariableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterNombreSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitNombreSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombreSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NombreArregloContext : VariableContext {
		public NombreVarContext[] nombreVar() {
			return GetRuleContexts<NombreVarContext>();
		}
		public NombreVarContext nombreVar(int i) {
			return GetRuleContext<NombreVarContext>(i);
		}
		public ITerminalNode OBR() { return GetToken(PenguineseParser.OBR, 0); }
		public ITerminalNode CBR() { return GetToken(PenguineseParser.CBR, 0); }
		public ValorEnteroContext valorEntero() {
			return GetRuleContext<ValorEnteroContext>(0);
		}
		public MathArrayContext mathArray() {
			return GetRuleContext<MathArrayContext>(0);
		}
		public NombreArregloContext(VariableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterNombreArreglo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitNombreArreglo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombreArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			State = 140;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new NombreSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; nombreVar();
				}
				break;

			case 2:
				_localctx = new NombreArregloContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; nombreVar();
				State = 132; Match(OBR);
				State = 136;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					State = 133; nombreVar();
					}
					break;

				case 2:
					{
					State = 134; valorEntero();
					}
					break;

				case 3:
					{
					State = 135; mathArray();
					}
					break;
				}
				State = 138; Match(CBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorVarContext : ParserRuleContext {
		public ValorEnteroContext valorEntero() {
			return GetRuleContext<ValorEnteroContext>(0);
		}
		public ValorDecContext valorDec() {
			return GetRuleContext<ValorDecContext>(0);
		}
		public ValorCharContext valorChar() {
			return GetRuleContext<ValorCharContext>(0);
		}
		public ValorStringContext valorString() {
			return GetRuleContext<ValorStringContext>(0);
		}
		public ValorBoolContext valorBool() {
			return GetRuleContext<ValorBoolContext>(0);
		}
		public ValorVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorVarContext valorVar() {
		ValorVarContext _localctx = new ValorVarContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_valorVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 142; valorEntero();
				}
				break;

			case 2:
				{
				State = 143; valorDec();
				}
				break;

			case 3:
				{
				State = 144; valorChar();
				}
				break;

			case 4:
				{
				State = 145; valorString();
				}
				break;

			case 5:
				{
				State = 146; valorBool();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorEnteroContext : ParserRuleContext {
		public ITerminalNode NUMERAL() { return GetToken(PenguineseParser.NUMERAL, 0); }
		public ValorEnteroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorEntero; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorEntero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorEntero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorEntero(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorEnteroContext valorEntero() {
		ValorEnteroContext _localctx = new ValorEnteroContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_valorEntero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(NUMERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorDecContext : ParserRuleContext {
		public ITerminalNode[] NUMERAL() { return GetTokens(PenguineseParser.NUMERAL); }
		public ITerminalNode NUMERAL(int i) {
			return GetToken(PenguineseParser.NUMERAL, i);
		}
		public ITerminalNode DEC() { return GetToken(PenguineseParser.DEC, 0); }
		public ValorDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorDecContext valorDec() {
		ValorDecContext _localctx = new ValorDecContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_valorDec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(NUMERAL);
			State = 152; Match(DEC);
			State = 153; Match(NUMERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorCharContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(PenguineseParser.CHAR, 0); }
		public ValorCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorChar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorCharContext valorChar() {
		ValorCharContext _localctx = new ValorCharContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_valorChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorStringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(PenguineseParser.STRING, 0); }
		public ValorStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorStringContext valorString() {
		ValorStringContext _localctx = new ValorStringContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_valorString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorBoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(PenguineseParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(PenguineseParser.FALSE, 0); }
		public ValorBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorBool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorBoolContext valorBool() {
		ValorBoolContext _localctx = new ValorBoolContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_valorBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = _input.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathSimpleContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public ITerminalNode OPERATORPM() { return GetToken(PenguineseParser.OPERATORPM, 0); }
		public ITerminalNode OPERATORMD() { return GetToken(PenguineseParser.OPERATORMD, 0); }
		public ValorNumContext[] valorNum() {
			return GetRuleContexts<ValorNumContext>();
		}
		public ValorNumContext valorNum(int i) {
			return GetRuleContext<ValorNumContext>(i);
		}
		public MathSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathSimple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterMathSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitMathSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathSimpleContext mathSimple() {
		MathSimpleContext _localctx = new MathSimpleContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_mathSimple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; variable();
			State = 162; Match(EQUALS);
			State = 165;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
				{
				State = 163; valorNum();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 164; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 167;
			_la = _input.La(1);
			if ( !(_la==OPERATORMD || _la==OPERATORPM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 170;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
				{
				State = 168; valorNum();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 169; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathArrayContext : ParserRuleContext {
		public ITerminalNode OPERATORPM() { return GetToken(PenguineseParser.OPERATORPM, 0); }
		public ITerminalNode OPERATORMD() { return GetToken(PenguineseParser.OPERATORMD, 0); }
		public ValorNumContext[] valorNum() {
			return GetRuleContexts<ValorNumContext>();
		}
		public ValorNumContext valorNum(int i) {
			return GetRuleContext<ValorNumContext>(i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public MathArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterMathArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitMathArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathArrayContext mathArray() {
		MathArrayContext _localctx = new MathArrayContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_mathArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
				{
				State = 172; valorNum();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 173; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 176;
			_la = _input.La(1);
			if ( !(_la==OPERATORMD || _la==OPERATORPM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 179;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
				{
				State = 177; valorNum();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 178; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public ValorNumContext valorNum() {
			return GetRuleContext<ValorNumContext>(0);
		}
		public MathSeqMDContext[] mathSeqMD() {
			return GetRuleContexts<MathSeqMDContext>();
		}
		public MathSeqMDContext mathSeqMD(int i) {
			return GetRuleContext<MathSeqMDContext>(i);
		}
		public MathSeqPMContext[] mathSeqPM() {
			return GetRuleContexts<MathSeqPMContext>();
		}
		public MathSeqPMContext mathSeqPM(int i) {
			return GetRuleContext<MathSeqPMContext>(i);
		}
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_math);
		int _la;
		try {
			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; variable();
				State = 182; Match(EQUALS);
				State = 183; valorNum();
				State = 187;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPERATORMD) {
					{
					{
					State = 184; mathSeqMD();
					}
					}
					State = 189;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPERATORPM) {
					{
					{
					State = 190; mathSeqPM();
					}
					}
					State = 195;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; variable();
				State = 197; Match(EQUALS);
				State = 198; variable();
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPERATORMD) {
					{
					{
					State = 199; mathSeqMD();
					}
					}
					State = 204;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 208;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPERATORPM) {
					{
					{
					State = 205; mathSeqPM();
					}
					}
					State = 210;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathSeqMDContext : ParserRuleContext {
		public MathSeqMDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathSeqMD; } }
	 
		public MathSeqMDContext() { }
		public virtual void CopyFrom(MathSeqMDContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SeqNumContext : MathSeqMDContext {
		public ITerminalNode OPERATORMD() { return GetToken(PenguineseParser.OPERATORMD, 0); }
		public ValorNumContext valorNum() {
			return GetRuleContext<ValorNumContext>(0);
		}
		public SeqNumContext(MathSeqMDContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterSeqNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitSeqNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SeqVarContext : MathSeqMDContext {
		public ITerminalNode OPERATORMD() { return GetToken(PenguineseParser.OPERATORMD, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SeqVarContext(MathSeqMDContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterSeqVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitSeqVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathSeqMDContext mathSeqMD() {
		MathSeqMDContext _localctx = new MathSeqMDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_mathSeqMD);
		try {
			State = 217;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				_localctx = new SeqNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(OPERATORMD);
				State = 214; valorNum();
				}
				break;

			case 2:
				_localctx = new SeqVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(OPERATORMD);
				State = 216; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathSeqPMContext : ParserRuleContext {
		public ITerminalNode OPERATORPM() { return GetToken(PenguineseParser.OPERATORPM, 0); }
		public ValorNumContext valorNum() {
			return GetRuleContext<ValorNumContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public MathSeqPMContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathSeqPM; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterMathSeqPM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitMathSeqPM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathSeqPM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathSeqPMContext mathSeqPM() {
		MathSeqPMContext _localctx = new MathSeqPMContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_mathSeqPM);
		try {
			State = 223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; Match(OPERATORPM);
				State = 220; valorNum();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; Match(OPERATORPM);
				State = 222; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorNumContext : ParserRuleContext {
		public ValorEnteroContext valorEntero() {
			return GetRuleContext<ValorEnteroContext>(0);
		}
		public ValorDecContext valorDec() {
			return GetRuleContext<ValorDecContext>(0);
		}
		public ValorNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorNum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorNumContext valorNum() {
		ValorNumContext _localctx = new ValorNumContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_valorNum);
		try {
			State = 227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; valorEntero();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; valorDec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CicloContext : ParserRuleContext {
		public CicloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ciclo; } }
	 
		public CicloContext() { }
		public virtual void CopyFrom(CicloContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CicloWhileContext : CicloContext {
		public ITerminalNode WHILE() { return GetToken(PenguineseParser.WHILE, 0); }
		public ITerminalNode OP() { return GetToken(PenguineseParser.OP, 0); }
		public CondicionalContext condicional() {
			return GetRuleContext<CondicionalContext>(0);
		}
		public ITerminalNode CP() { return GetToken(PenguineseParser.CP, 0); }
		public ITerminalNode THEN() { return GetToken(PenguineseParser.THEN, 0); }
		public ITerminalNode OCB() { return GetToken(PenguineseParser.OCB, 0); }
		public BloqueCodigoContext bloqueCodigo() {
			return GetRuleContext<BloqueCodigoContext>(0);
		}
		public ITerminalNode CCB() { return GetToken(PenguineseParser.CCB, 0); }
		public CicloWhileContext(CicloContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterCicloWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitCicloWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCicloWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CicloIfContext : CicloContext {
		public ITerminalNode IF() { return GetToken(PenguineseParser.IF, 0); }
		public ITerminalNode OP() { return GetToken(PenguineseParser.OP, 0); }
		public CondicionalContext condicional() {
			return GetRuleContext<CondicionalContext>(0);
		}
		public ITerminalNode CP() { return GetToken(PenguineseParser.CP, 0); }
		public ITerminalNode THEN() { return GetToken(PenguineseParser.THEN, 0); }
		public ITerminalNode OCB() { return GetToken(PenguineseParser.OCB, 0); }
		public BloqueCodigoContext bloqueCodigo() {
			return GetRuleContext<BloqueCodigoContext>(0);
		}
		public ITerminalNode CCB() { return GetToken(PenguineseParser.CCB, 0); }
		public CicloIfContext(CicloContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterCicloIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitCicloIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCicloIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CicloForContext : CicloContext {
		public ITerminalNode FOR() { return GetToken(PenguineseParser.FOR, 0); }
		public ITerminalNode OP() { return GetToken(PenguineseParser.OP, 0); }
		public SeccionForContext seccionFor() {
			return GetRuleContext<SeccionForContext>(0);
		}
		public ITerminalNode CP() { return GetToken(PenguineseParser.CP, 0); }
		public ITerminalNode OCB() { return GetToken(PenguineseParser.OCB, 0); }
		public BloqueCodigoContext bloqueCodigo() {
			return GetRuleContext<BloqueCodigoContext>(0);
		}
		public ITerminalNode CCB() { return GetToken(PenguineseParser.CCB, 0); }
		public CicloForContext(CicloContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterCicloFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitCicloFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCicloFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CicloContext ciclo() {
		CicloContext _localctx = new CicloContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_ciclo);
		try {
			State = 255;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IF:
				_localctx = new CicloIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(IF);
				State = 230; Match(OP);
				State = 231; condicional();
				State = 232; Match(CP);
				State = 233; Match(THEN);
				State = 234; Match(OCB);
				State = 235; bloqueCodigo();
				State = 236; Match(CCB);
				}
				break;
			case WHILE:
				_localctx = new CicloWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; Match(WHILE);
				State = 239; Match(OP);
				State = 240; condicional();
				State = 241; Match(CP);
				State = 242; Match(THEN);
				State = 243; Match(OCB);
				State = 244; bloqueCodigo();
				State = 245; Match(CCB);
				}
				break;
			case FOR:
				_localctx = new CicloForContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 247; Match(FOR);
				State = 248; Match(OP);
				State = 249; seccionFor();
				State = 250; Match(CP);
				State = 251; Match(OCB);
				State = 252; bloqueCodigo();
				State = 253; Match(CCB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionalContext : ParserRuleContext {
		public ValorCondContext[] valorCond() {
			return GetRuleContexts<ValorCondContext>();
		}
		public ValorCondContext valorCond(int i) {
			return GetRuleContext<ValorCondContext>(i);
		}
		public ITerminalNode COND() { return GetToken(PenguineseParser.COND, 0); }
		public CondSeqContext[] condSeq() {
			return GetRuleContexts<CondSeqContext>();
		}
		public CondSeqContext condSeq(int i) {
			return GetRuleContext<CondSeqContext>(i);
		}
		public CondicionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterCondicional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitCondicional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondicionalContext condicional() {
		CondicionalContext _localctx = new CondicionalContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_condicional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; valorCond();
			State = 258; Match(COND);
			State = 259; valorCond();
			State = 263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SepCOND) {
				{
				{
				State = 260; condSeq();
				}
				}
				State = 265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorCondContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValorEnteroContext valorEntero() {
			return GetRuleContext<ValorEnteroContext>(0);
		}
		public ValorDecContext valorDec() {
			return GetRuleContext<ValorDecContext>(0);
		}
		public ValorCharContext valorChar() {
			return GetRuleContext<ValorCharContext>(0);
		}
		public ValorStringContext valorString() {
			return GetRuleContext<ValorStringContext>(0);
		}
		public ValorBoolContext valorBool() {
			return GetRuleContext<ValorBoolContext>(0);
		}
		public ValorCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valorCond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterValorCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitValorCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorCondContext valorCond() {
		ValorCondContext _localctx = new ValorCondContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_valorCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 266; variable();
				}
				break;

			case 2:
				{
				State = 267; valorEntero();
				}
				break;

			case 3:
				{
				State = 268; valorDec();
				}
				break;

			case 4:
				{
				State = 269; valorChar();
				}
				break;

			case 5:
				{
				State = 270; valorString();
				}
				break;

			case 6:
				{
				State = 271; valorBool();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondSeqContext : ParserRuleContext {
		public ITerminalNode SepCOND() { return GetToken(PenguineseParser.SepCOND, 0); }
		public ValorCondContext[] valorCond() {
			return GetRuleContexts<ValorCondContext>();
		}
		public ValorCondContext valorCond(int i) {
			return GetRuleContext<ValorCondContext>(i);
		}
		public ITerminalNode COND() { return GetToken(PenguineseParser.COND, 0); }
		public CondSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterCondSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitCondSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondSeqContext condSeq() {
		CondSeqContext _localctx = new CondSeqContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_condSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(SepCOND);
			State = 275; valorCond();
			State = 276; Match(COND);
			State = 277; valorCond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeccionForContext : ParserRuleContext {
		public AsignForContext asignFor() {
			return GetRuleContext<AsignForContext>(0);
		}
		public ITerminalNode[] TERM() { return GetTokens(PenguineseParser.TERM); }
		public ITerminalNode TERM(int i) {
			return GetToken(PenguineseParser.TERM, i);
		}
		public CondicionalContext condicional() {
			return GetRuleContext<CondicionalContext>(0);
		}
		public MathSimpleContext mathSimple() {
			return GetRuleContext<MathSimpleContext>(0);
		}
		public SeccionForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seccionFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterSeccionFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitSeccionFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeccionFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeccionForContext seccionFor() {
		SeccionForContext _localctx = new SeccionForContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_seccionFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; asignFor();
			State = 280; Match(TERM);
			State = 281; condicional();
			State = 282; Match(TERM);
			State = 283; mathSimple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignForContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode EQUALS() { return GetToken(PenguineseParser.EQUALS, 0); }
		public ValorNumContext valorNum() {
			return GetRuleContext<ValorNumContext>(0);
		}
		public AsignForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterAsignFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitAsignFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignForContext asignFor() {
		AsignForContext _localctx = new AsignForContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_asignFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; variable();
			State = 286; Match(EQUALS);
			State = 289;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMERAL:
				{
				State = 287; valorNum();
				}
				break;
			case LETTER:
			case WORD:
				{
				State = 288; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImprimirValorContext : ParserRuleContext {
		public ITerminalNode READ() { return GetToken(PenguineseParser.READ, 0); }
		public ITerminalNode[] COL() { return GetTokens(PenguineseParser.COL); }
		public ITerminalNode COL(int i) {
			return GetToken(PenguineseParser.COL, i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ValorStringContext[] valorString() {
			return GetRuleContexts<ValorStringContext>();
		}
		public ValorStringContext valorString(int i) {
			return GetRuleContext<ValorStringContext>(i);
		}
		public ImprimirValorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imprimirValor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterImprimirValor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitImprimirValor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImprimirValor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImprimirValorContext imprimirValor() {
		ImprimirValorContext _localctx = new ImprimirValorContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_imprimirValor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(READ);
			State = 298;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 292; Match(COL);
				State = 293; Match(COL);
				State = 296;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LETTER:
				case WORD:
					{
					State = 294; variable();
					}
					break;
				case STRING:
					{
					State = 295; valorString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 300;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscribirValorContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(PenguineseParser.WRITE, 0); }
		public ITerminalNode[] COL() { return GetTokens(PenguineseParser.COL); }
		public ITerminalNode COL(int i) {
			return GetToken(PenguineseParser.COL, i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public EscribirValorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escribirValor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.EnterEscribirValor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPenguineseListener typedListener = listener as IPenguineseListener;
			if (typedListener != null) typedListener.ExitEscribirValor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPenguineseVisitor<TResult> typedVisitor = visitor as IPenguineseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscribirValor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscribirValorContext escribirValor() {
		EscribirValorContext _localctx = new EscribirValorContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_escribirValor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(WRITE);
			State = 303; Match(COL);
			State = 304; Match(COL);
			{
			State = 305; variable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3+\x136\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x6\x3J\n\x3\r\x3\xE\x3"+
		"K\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4U\n\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x5\x5[\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6g\n\x6\x3\a\x3\a\x3\a\x3\a\x5\am\n\a\x3\b\x3\b\x3\b"+
		"\x3\b\a\bs\n\b\f\b\xE\bv\v\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x7F"+
		"\n\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x8B\n\f\x3"+
		"\f\x3\f\x5\f\x8F\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x96\n\r\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x5\x13\xA8\n\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\xAD\n\x13\x3\x14\x3\x14\x5\x14\xB1\n\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\xB6\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\xBC\n\x15\f\x15\xE\x15\xBF"+
		"\v\x15\x3\x15\a\x15\xC2\n\x15\f\x15\xE\x15\xC5\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\a\x15\xCB\n\x15\f\x15\xE\x15\xCE\v\x15\x3\x15\a\x15\xD1\n"+
		"\x15\f\x15\xE\x15\xD4\v\x15\x5\x15\xD6\n\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x5\x16\xDC\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\xE2\n\x17\x3\x18"+
		"\x3\x18\x5\x18\xE6\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x102\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x108\n\x1A\f\x1A\xE"+
		"\x1A\x10B\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x113"+
		"\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x124\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x12B\n\x1F\x6\x1F\x12D\n\x1F\r\x1F\xE"+
		"\x1F\x12E\x3 \x3 \x3 \x3 \x3 \x3 \x2\x2\x2!\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2\x2\x6\x4\x2\x1D \"\"\x4\x2\'\'))\x3\x2\x15\x16\x3\x2\x4\x5\x140"+
		"\x2@\x3\x2\x2\x2\x4I\x3\x2\x2\x2\x6T\x3\x2\x2\x2\bZ\x3\x2\x2\x2\n\x66"+
		"\x3\x2\x2\x2\fh\x3\x2\x2\x2\xEn\x3\x2\x2\x2\x10~\x3\x2\x2\x2\x12\x80\x3"+
		"\x2\x2\x2\x14\x82\x3\x2\x2\x2\x16\x8E\x3\x2\x2\x2\x18\x95\x3\x2\x2\x2"+
		"\x1A\x97\x3\x2\x2\x2\x1C\x99\x3\x2\x2\x2\x1E\x9D\x3\x2\x2\x2 \x9F\x3\x2"+
		"\x2\x2\"\xA1\x3\x2\x2\x2$\xA3\x3\x2\x2\x2&\xB0\x3\x2\x2\x2(\xD5\x3\x2"+
		"\x2\x2*\xDB\x3\x2\x2\x2,\xE1\x3\x2\x2\x2.\xE5\x3\x2\x2\x2\x30\x101\x3"+
		"\x2\x2\x2\x32\x103\x3\x2\x2\x2\x34\x112\x3\x2\x2\x2\x36\x114\x3\x2\x2"+
		"\x2\x38\x119\x3\x2\x2\x2:\x11F\x3\x2\x2\x2<\x125\x3\x2\x2\x2>\x130\x3"+
		"\x2\x2\x2@\x41\a\x1B\x2\x2\x41\x42\a\x1C\x2\x2\x42\x43\a\f\x2\x2\x43\x44"+
		"\a\r\x2\x2\x44\x45\a\x10\x2\x2\x45\x46\x5\x4\x3\x2\x46G\a\x11\x2\x2G\x3"+
		"\x3\x2\x2\x2HJ\x5\x6\x4\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2\x2K"+
		"L\x3\x2\x2\x2L\x5\x3\x2\x2\x2MU\x5\b\x5\x2NU\x5\f\a\x2OU\x5(\x15\x2PU"+
		"\x5\x30\x19\x2QU\x5<\x1F\x2RU\x5> \x2SU\a#\x2\x2TM\x3\x2\x2\x2TN\x3\x2"+
		"\x2\x2TO\x3\x2\x2\x2TP\x3\x2\x2\x2TQ\x3\x2\x2\x2TR\x3\x2\x2\x2TS\x3\x2"+
		"\x2\x2UV\x3\x2\x2\x2VW\a\n\x2\x2W\a\x3\x2\x2\x2X[\x5\xE\b\x2Y[\x5\n\x6"+
		"\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[\t\x3\x2\x2\x2\\]\x5\x12\n\x2]^\x5\x14"+
		"\v\x2^_\a\x13\x2\x2_`\x5\x18\r\x2`g\x3\x2\x2\x2\x61\x62\x5\x12\n\x2\x62"+
		"\x63\x5\x14\v\x2\x63\x64\a\x13\x2\x2\x64\x65\x5\x16\f\x2\x65g\x3\x2\x2"+
		"\x2\x66\\\x3\x2\x2\x2\x66\x61\x3\x2\x2\x2g\v\x3\x2\x2\x2hi\x5\x16\f\x2"+
		"il\a\x13\x2\x2jm\x5\x18\r\x2km\x5\x16\f\x2lj\x3\x2\x2\x2lk\x3\x2\x2\x2"+
		"m\r\x3\x2\x2\x2no\x5\x10\t\x2ot\x5\x14\v\x2pq\a\v\x2\x2qs\x5\x14\v\x2"+
		"rp\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u\xF\x3\x2\x2"+
		"\x2vt\x3\x2\x2\x2wx\a!\x2\x2xy\x5\x12\n\x2yz\a\xE\x2\x2z{\a\x3\x2\x2{"+
		"|\a\xF\x2\x2|\x7F\x3\x2\x2\x2}\x7F\x5\x12\n\x2~w\x3\x2\x2\x2~}\x3\x2\x2"+
		"\x2\x7F\x11\x3\x2\x2\x2\x80\x81\t\x2\x2\x2\x81\x13\x3\x2\x2\x2\x82\x83"+
		"\t\x3\x2\x2\x83\x15\x3\x2\x2\x2\x84\x8F\x5\x14\v\x2\x85\x86\x5\x14\v\x2"+
		"\x86\x8A\a\xE\x2\x2\x87\x8B\x5\x14\v\x2\x88\x8B\x5\x1A\xE\x2\x89\x8B\x5"+
		"&\x14\x2\x8A\x87\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B"+
		"\x8C\x3\x2\x2\x2\x8C\x8D\a\xF\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x84\x3\x2"+
		"\x2\x2\x8E\x85\x3\x2\x2\x2\x8F\x17\x3\x2\x2\x2\x90\x96\x5\x1A\xE\x2\x91"+
		"\x96\x5\x1C\xF\x2\x92\x96\x5\x1E\x10\x2\x93\x96\x5 \x11\x2\x94\x96\x5"+
		"\"\x12\x2\x95\x90\x3\x2\x2\x2\x95\x91\x3\x2\x2\x2\x95\x92\x3\x2\x2\x2"+
		"\x95\x93\x3\x2\x2\x2\x95\x94\x3\x2\x2\x2\x96\x19\x3\x2\x2\x2\x97\x98\a"+
		"\x3\x2\x2\x98\x1B\x3\x2\x2\x2\x99\x9A\a\x3\x2\x2\x9A\x9B\a\x12\x2\x2\x9B"+
		"\x9C\a\x3\x2\x2\x9C\x1D\x3\x2\x2\x2\x9D\x9E\a(\x2\x2\x9E\x1F\x3\x2\x2"+
		"\x2\x9F\xA0\a*\x2\x2\xA0!\x3\x2\x2\x2\xA1\xA2\t\x4\x2\x2\xA2#\x3\x2\x2"+
		"\x2\xA3\xA4\x5\x16\f\x2\xA4\xA7\a\x13\x2\x2\xA5\xA8\x5.\x18\x2\xA6\xA8"+
		"\x5\x16\f\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2"+
		"\x2\xA9\xAC\t\x5\x2\x2\xAA\xAD\x5.\x18\x2\xAB\xAD\x5\x16\f\x2\xAC\xAA"+
		"\x3\x2\x2\x2\xAC\xAB\x3\x2\x2\x2\xAD%\x3\x2\x2\x2\xAE\xB1\x5.\x18\x2\xAF"+
		"\xB1\x5\x16\f\x2\xB0\xAE\x3\x2\x2\x2\xB0\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2"+
		"\x2\x2\xB2\xB5\t\x5\x2\x2\xB3\xB6\x5.\x18\x2\xB4\xB6\x5\x16\f\x2\xB5\xB3"+
		"\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\'\x3\x2\x2\x2\xB7\xB8\x5\x16\f\x2"+
		"\xB8\xB9\a\x13\x2\x2\xB9\xBD\x5.\x18\x2\xBA\xBC\x5*\x16\x2\xBB\xBA\x3"+
		"\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2"+
		"\xBE\xC3\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC2\x5,\x17\x2\xC1\xC0\x3"+
		"\x2\x2\x2\xC2\xC5\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2"+
		"\xC4\xD6\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC6\xC7\x5\x16\f\x2\xC7\xC8\a"+
		"\x13\x2\x2\xC8\xCC\x5\x16\f\x2\xC9\xCB\x5*\x16\x2\xCA\xC9\x3\x2\x2\x2"+
		"\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD2\x3"+
		"\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1\x5,\x17\x2\xD0\xCF\x3\x2\x2\x2\xD1"+
		"\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD6\x3\x2"+
		"\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xB7\x3\x2\x2\x2\xD5\xC6\x3\x2\x2\x2\xD6"+
		")\x3\x2\x2\x2\xD7\xD8\a\x4\x2\x2\xD8\xDC\x5.\x18\x2\xD9\xDA\a\x4\x2\x2"+
		"\xDA\xDC\x5\x16\f\x2\xDB\xD7\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC+\x3\x2"+
		"\x2\x2\xDD\xDE\a\x5\x2\x2\xDE\xE2\x5.\x18\x2\xDF\xE0\a\x5\x2\x2\xE0\xE2"+
		"\x5\x16\f\x2\xE1\xDD\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2-\x3\x2\x2\x2"+
		"\xE3\xE6\x5\x1A\xE\x2\xE4\xE6\x5\x1C\xF\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE4"+
		"\x3\x2\x2\x2\xE6/\x3\x2\x2\x2\xE7\xE8\a\x17\x2\x2\xE8\xE9\a\f\x2\x2\xE9"+
		"\xEA\x5\x32\x1A\x2\xEA\xEB\a\r\x2\x2\xEB\xEC\a\x18\x2\x2\xEC\xED\a\x10"+
		"\x2\x2\xED\xEE\x5\x4\x3\x2\xEE\xEF\a\x11\x2\x2\xEF\x102\x3\x2\x2\x2\xF0"+
		"\xF1\a\x19\x2\x2\xF1\xF2\a\f\x2\x2\xF2\xF3\x5\x32\x1A\x2\xF3\xF4\a\r\x2"+
		"\x2\xF4\xF5\a\x18\x2\x2\xF5\xF6\a\x10\x2\x2\xF6\xF7\x5\x4\x3\x2\xF7\xF8"+
		"\a\x11\x2\x2\xF8\x102\x3\x2\x2\x2\xF9\xFA\a\x1A\x2\x2\xFA\xFB\a\f\x2\x2"+
		"\xFB\xFC\x5\x38\x1D\x2\xFC\xFD\a\r\x2\x2\xFD\xFE\a\x10\x2\x2\xFE\xFF\x5"+
		"\x4\x3\x2\xFF\x100\a\x11\x2\x2\x100\x102\x3\x2\x2\x2\x101\xE7\x3\x2\x2"+
		"\x2\x101\xF0\x3\x2\x2\x2\x101\xF9\x3\x2\x2\x2\x102\x31\x3\x2\x2\x2\x103"+
		"\x104\x5\x34\x1B\x2\x104\x105\a\b\x2\x2\x105\x109\x5\x34\x1B\x2\x106\x108"+
		"\x5\x36\x1C\x2\x107\x106\x3\x2\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3"+
		"\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x33\x3\x2\x2\x2\x10B\x109\x3\x2\x2"+
		"\x2\x10C\x113\x5\x16\f\x2\x10D\x113\x5\x1A\xE\x2\x10E\x113\x5\x1C\xF\x2"+
		"\x10F\x113\x5\x1E\x10\x2\x110\x113\x5 \x11\x2\x111\x113\x5\"\x12\x2\x112"+
		"\x10C\x3\x2\x2\x2\x112\x10D\x3\x2\x2\x2\x112\x10E\x3\x2\x2\x2\x112\x10F"+
		"\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x111\x3\x2\x2\x2\x113\x35\x3\x2"+
		"\x2\x2\x114\x115\a\t\x2\x2\x115\x116\x5\x34\x1B\x2\x116\x117\a\b\x2\x2"+
		"\x117\x118\x5\x34\x1B\x2\x118\x37\x3\x2\x2\x2\x119\x11A\x5:\x1E\x2\x11A"+
		"\x11B\a\n\x2\x2\x11B\x11C\x5\x32\x1A\x2\x11C\x11D\a\n\x2\x2\x11D\x11E"+
		"\x5$\x13\x2\x11E\x39\x3\x2\x2\x2\x11F\x120\x5\x16\f\x2\x120\x123\a\x13"+
		"\x2\x2\x121\x124\x5.\x18\x2\x122\x124\x5\x16\f\x2\x123\x121\x3\x2\x2\x2"+
		"\x123\x122\x3\x2\x2\x2\x124;\x3\x2\x2\x2\x125\x12C\a%\x2\x2\x126\x127"+
		"\a\x14\x2\x2\x127\x12A\a\x14\x2\x2\x128\x12B\x5\x16\f\x2\x129\x12B\x5"+
		" \x11\x2\x12A\x128\x3\x2\x2\x2\x12A\x129\x3\x2\x2\x2\x12B\x12D\x3\x2\x2"+
		"\x2\x12C\x126\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2"+
		"\x12E\x12F\x3\x2\x2\x2\x12F=\x3\x2\x2\x2\x130\x131\a&\x2\x2\x131\x132"+
		"\a\x14\x2\x2\x132\x133\a\x14\x2\x2\x133\x134\x5\x16\f\x2\x134?\x3\x2\x2"+
		"\x2\x1EKTZ\x66lt~\x8A\x8E\x95\xA7\xAC\xB0\xB5\xBD\xC3\xCC\xD2\xD5\xDB"+
		"\xE1\xE5\x101\x109\x112\x123\x12A\x12E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Skipper
